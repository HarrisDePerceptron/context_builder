# ───────────── Project Structure ─────────────
centrox-performance-estimation
├── .env
├── .gitignore
├── .python-version
├── README.md
├── data
│   ├── .DS_Store
│   ├── combined_summary.csv
│   ├── combined_summary.html
│   ├── github_leaderboard_2025-05-01_2025-05-30_20250525_115230.csv
│   ├── github_summary_2025-05-01_2025-05-30_20250525_115230.csv
│   ├── leaderboard_2025-05-01_2025-05-30_20250525_114541.csv
│   ├── mapping.csv
│   └── summary_2025-05-01_2025-05-30_20250525_114541.csv
├── github_dashboard_2025-06-01_2025-06-30_20250629_171557.html
├── github_dashboard_2025-06-01_2025-06-30_20250629_174630.html
├── performance
│   ├── config.py
│   ├── db
│   │   ├── base_data_access.py
│   │   ├── init_db.py
│   │   └── mongo.py
│   ├── main.py
│   ├── models
│   │   ├── base_model.py
│   │   ├── employee_summary.py
│   │   ├── github_summary.py
│   │   └── user.py
│   ├── scripts
│   │   ├── combine_metrics.py
│   │   ├── github_multi.py
│   │   ├── injest_github.py
│   │   ├── injest_to_db.py
│   │   ├── injest_user_mapping.py
│   │   ├── process_github.py
│   │   ├── process_gitlab.py
│   │   └── test.py
│   ├── source
│   │   └── github_metrics.py
│   ├── templates
│   │   └── dashboard.html
│   └── utils.py
├── pyproject.toml
├── requirements.txt
├── run.sh
└── uv.lock
# ───────────── Function Signatures ─────────────
performance/config.py:43: tokens(self) -> List[str]
performance/config.py:54: branches(self) -> List[str]
performance/config.py:70: branches(self) -> List[str]
performance/config.py:81: end_dt(self) -> datetime
performance/config.py:85: start_dt(self) -> datetime
performance/config.py:89: span_days(self) -> int
performance/config.py:103: dsn(self) -> str
performance/db/base_data_access.py:21: patch_typed_dict(model: Type[BaseModel]) -> Type[TypedDict]
performance/db/base_data_access.py:54: __init__(self, model: Type[T_doc]) -> None
performance/db/base_data_access.py:70: _now_utc() -> dt.datetime
performance/db/base_data_access.py:74: _regexify(filters: Dict[str, Any]) -> Dict[str, Any]
performance/db/base_data_access.py:83: _inject_active_only(cls, filters: Dict[str, Any]) -> Dict[str, Any]
performance/db/base_data_access.py:93: _timestamp_create(self, doc: T_doc) -> None
performance/db/base_data_access.py:98: _touch(self, payload: Dict[str, Any]) -> None
performance/db/base_data_access.py:102: transaction(self) -> Unknown
performance/db/base_data_access.py:109: create(self, obj: T_doc) -> T_doc
performance/db/base_data_access.py:120: batch_create(self, docs: List[T_doc]) -> List[T_doc]
performance/db/base_data_access.py:146: list(self) -> PaginatedResponse[T_doc]
performance/db/base_data_access.py:189: count(self) -> int
performance/db/base_data_access.py:209: get(self, obj_id: Union[str, PydanticObjectId]) -> Optional[T_doc]
performance/db/base_data_access.py:212: update(self) -> Optional[T_doc]
performance/db/base_data_access.py:225: batch_update(self) -> int
performance/db/base_data_access.py:248: delete(self, obj_id: Union[str, PydanticObjectId]) -> Optional[T_doc]
performance/db/base_data_access.py:271: list_created_between(self, start: dt.datetime, end: dt.datetime) -> PaginatedResponse[T_doc]
performance/db/base_data_access.py:307: batch_get(self, ids: List[Union[str, PydanticObjectId]]) -> List[T_doc]
performance/db/init_db.py:7: init_collections() -> None
performance/db/mongo.py:39: init_db() -> None
performance/main.py:25: ingest() -> None
performance/models/base_model.py:9: now_utc() -> dt.datetime
performance/models/employee_summary.py:16: _utcnow() -> dt.datetime
performance/models/user.py:19: key(self) -> tuple[Optional[str], Optional[str]]
performance/scripts/combine_metrics.py:24: _resolve_in_data(p: str | None) -> str | None
performance/scripts/combine_metrics.py:47: parse_env() -> Config
performance/scripts/combine_metrics.py:92: build_user_mapping(mapping_df: pd.DataFrame) -> dict[str, str]
performance/scripts/combine_metrics.py:115: load_platform_df(path: str, prefix: str, user_map: dict[str, str]) -> pd.DataFrame
performance/scripts/combine_metrics.py:124: min_max_norm(s: pd.Series) -> pd.Series
performance/scripts/combine_metrics.py:132: write_html(df: pd.DataFrame, path: str) -> None
performance/scripts/combine_metrics.py:172: main() -> None
performance/scripts/github_multi.py:10: parse_env() -> Unknown
performance/scripts/github_multi.py:54: init_client(url, token) -> Unknown
performance/scripts/github_multi.py:60: fetch_repositories(gh: Github, since_dt, until_dt) -> Unknown
performance/scripts/github_multi.py:102: compute_member_metrics(repo, member, branches, since_dt, until_dt, days_span, repo_name) -> Unknown
performance/scripts/github_multi.py:221: calculate_scores(summary) -> Unknown
performance/scripts/github_multi.py:255: process_repository(gh, repo, branches, since_dt, until_dt, days_span) -> Unknown
performance/scripts/github_multi.py:300: aggregate_summary(leaderboard, days_span) -> Unknown
performance/scripts/github_multi.py:338: write_csvs(leaderboard, summary, start_dt, end_dt) -> Unknown
performance/scripts/github_multi.py:387: build_html(leaderboard, summary, start_dt, end_dt) -> Unknown
performance/scripts/github_multi.py:515: process_repository_wrapper(args) -> Unknown
performance/scripts/github_multi.py:521: main() -> Unknown
performance/scripts/injest_github.py:25: ingest() -> None
performance/scripts/injest_to_db.py:23: load_summary_df() -> pd.DataFrame
performance/scripts/injest_to_db.py:46: ingest(df: pd.DataFrame) -> None
performance/scripts/injest_to_db.py:94: main() -> None
performance/scripts/injest_user_mapping.py:30: _collect_values(row: pd.Series, cols: List[str], prefix: str) -> List[str]
performance/scripts/injest_user_mapping.py:43: _pair_accounts(usernames: List[str], emails: List[str]) -> List[AccountInfo]
performance/scripts/injest_user_mapping.py:60: _merge(old: List[AccountInfo], new: List[AccountInfo]) -> List[AccountInfo]
performance/scripts/injest_user_mapping.py:68: _ingest(csv_path: Path) -> None
performance/scripts/injest_user_mapping.py:129: main() -> None
performance/scripts/process_github.py:10: parse_env() -> Unknown
performance/scripts/process_github.py:44: init_client(url, token) -> Unknown
performance/scripts/process_github.py:50: fetch_repositories(gh: Github, since_dt, until_dt) -> Unknown
performance/scripts/process_github.py:87: compute_member_metrics(repo, member, branches, since_dt, until_dt, days_span, repo_name) -> Unknown
performance/scripts/process_github.py:206: calculate_scores(summary) -> Unknown
performance/scripts/process_github.py:240: process_repository(gh, repo, branches, since_dt, until_dt, days_span) -> Unknown
performance/scripts/process_github.py:285: aggregate_summary(leaderboard, days_span) -> Unknown
performance/scripts/process_github.py:323: write_csvs(leaderboard, summary, start_dt, end_dt) -> Unknown
performance/scripts/process_github.py:372: build_html(leaderboard, summary, start_dt, end_dt) -> Unknown
performance/scripts/process_github.py:500: process_repository_wrapper(args) -> Unknown
performance/scripts/process_github.py:506: main() -> Unknown
performance/scripts/process_gitlab.py:10: parse_env() -> Unknown
performance/scripts/process_gitlab.py:44: init_client(url, token) -> Unknown
performance/scripts/process_gitlab.py:50: fetch_projects(gl, since_iso, until_iso) -> Unknown
performance/scripts/process_gitlab.py:59: compute_member_metrics(proj_obj, member, branches, since_iso, until_iso, days_span, project_name) -> Unknown
performance/scripts/process_gitlab.py:129: calculate_scores(summary) -> Unknown
performance/scripts/process_gitlab.py:163: process_project(gl, proj_summary, branches, since_iso, until_iso, days_span) -> Unknown
performance/scripts/process_gitlab.py:203: aggregate_summary(leaderboard, days_span) -> Unknown
performance/scripts/process_gitlab.py:239: write_csvs(leaderboard, summary) -> Unknown
performance/scripts/process_gitlab.py:288: build_html(leaderboard, summary, start_dt, end_dt) -> Unknown
performance/scripts/process_gitlab.py:416: main() -> Unknown
performance/scripts/test.py:10: main() -> Unknown
performance/source/github_metrics.py:64: init_client(url: str | None, token: str) -> Github
performance/source/github_metrics.py:69: fetch_repositories(gh: Github, since_dt: datetime, until_dt: datetime) -> Unknown
performance/source/github_metrics.py:104: compute_member_metrics(repo, member, branches: list[str], since_dt: datetime, until_dt: datetime, days_span: int) -> Dict[str, object]
performance/source/github_metrics.py:208: calculate_scores(summary: Dict[str, Dict[str, object]]) -> None
performance/source/github_metrics.py:237: process_repository(repo, branches: list[str], since_dt: datetime, until_dt: datetime, days_span: int) -> List[Dict[str, object]]
performance/source/github_metrics.py:292: aggregate_summary(rows: List[Dict[str, object]], days_span: int) -> Dict[str, Dict[str, object]]
performance/source/github_metrics.py:340: write_csvs(leaderboard: Leaderboard, summary: Summary, start_dt: datetime, end_dt: datetime) -> Tuple[Path, Path]
performance/source/github_metrics.py:369: build_html(leaderboard: Leaderboard, summary: Summary, start_dt: datetime, end_dt: datetime) -> str
performance/source/github_metrics.py:403: generate_employee_summaries() -> Tuple[Leaderboard, Summary, datetime, datetime]
performance/source/github_metrics.py:460: main() -> None
performance/utils.py:4: find_directory(start: Path, folder: str, max_levels: int | None) -> Path
# ───────────── Class Definitions ─────────────
performance/config.py:21: class _AppBase(BaseSettings)
    • class_attrs: model_config -> Unknown
performance/config.py:30: class GitHubSettings(_AppBase)
    • class_attrs: branches_raw -> str, token_single -> Optional[str], tokens_csv -> Optional[str], url -> Optional[str]
    • properties: tokens -> List[str], branches -> List[str]
performance/config.py:59: class GitLabSettings(_AppBase)
    • class_attrs: branches_raw -> str, group_id -> Optional[int], token -> Optional[str], url -> Optional[str]
    • properties: branches -> List[str]
performance/config.py:75: class TimeWindow(_AppBase)
    • class_attrs: days -> int, end_env -> Optional[datetime], start_env -> Optional[datetime]
    • properties: end_dt -> datetime, start_dt -> datetime, span_days -> int
performance/config.py:94: class MongoSettings(_AppBase)
    • class_attrs: db_name -> str, host -> str, password -> Optional[str], port -> int, uri -> Optional[str], user -> Optional[str]
    • properties: dsn -> str
performance/config.py:111: class FilePathSettings(_AppBase)
    • class_attrs: github_summary_csv -> Optional[str], gitlab_summary_csv -> Optional[str], mapping_csv -> str, output_csv -> str, output_html -> str
performance/config.py:128: class AppSettings(_AppBase)
    • class_attrs: files -> FilePathSettings, github -> GitHubSettings, gitlab -> GitLabSettings, mongo -> MongoSettings, time -> TimeWindow
performance/db/base_data_access.py:37: class PaginatedResponse(BaseModel, Generic[T_doc])
    • class_attrs: has_next -> bool, has_prev -> bool, items -> List[T_doc], limit -> int, model_config -> Unknown, skip -> int, total -> int
performance/db/base_data_access.py:49: class BaseDataAccess(Generic[T_doc])
    • instance_attrs: audit_log -> Unknown, model -> Unknown, post_create -> Unknown, pre_create -> Unknown
performance/models/base_model.py:14: class BaseDocument(Document)
    • class_attrs: created_at -> Annotated[Optional[dt.datetime], Indexed(index_type=pymongo.DESCENDING), Field(default_factory=now_utc)], deleted_at -> Annotated[Optional[dt.datetime], Indexed(index_type=pymongo.DESCENDING)], id -> Annotated[Optional[PydanticObjectId], Field(alias='_id')], updated_at -> Annotated[Optional[dt.datetime], Indexed(index_type=pymongo.DESCENDING), Field(default_factory=now_utc)]
performance/models/employee_summary.py:20: class EmployeeSummary(BaseDocument)
    • class_attrs: additions -> Annotated[int, Field(ge=0)], commits -> Annotated[int, Field(ge=0)], deleteions -> Annotated[int, Field(ge=0)], deploy_per_day_avg -> Annotated[float, Field(ge=0)], employee -> Annotated[str, Indexed(), Field(min_length=1)], failure_rate_pct_avg -> Annotated[float, Field(ge=0)], failures -> Annotated[int, Field(ge=0)], merge_pr -> Annotated[int, Field(ge=0)], run_date -> Annotated[dt.datetime, Indexed()], score -> Annotated[float, Field(ge=0, le=1)], successes -> Annotated[int, Field(ge=0)]
performance/models/employee_summary.py:48: class Settings
    • class_attrs: indexes -> Unknown, name -> Unknown
performance/models/github_summary.py:7: class EmployeeGithubSummary(EmployeeSummary)
performance/models/github_summary.py:12: class Settings(EmployeeSummary.Settings)
    • class_attrs: name -> Unknown
performance/models/user.py:13: class AccountInfo(BaseModel)
    • class_attrs: email -> Optional[str], username -> Optional[str]
performance/models/user.py:23: class User(BaseDocument)
    • class_attrs: github -> List[AccountInfo], gitlab -> List[AccountInfo], name -> Annotated[str, Indexed(unique=True)]
performance/models/user.py:30: class Settings
    • class_attrs: indexes -> Unknown, name -> Unknown
performance/scripts/combine_metrics.py:39: class Config
    • class_attrs: github_path -> str, gitlab_path -> str, mapping_path -> str, output_csv -> str, output_html -> str
performance/source/github_metrics.py:31: class LeaderboardEntry(BaseModel)
    • class_attrs: additions -> int, commits -> int, deletions -> int, deploy_per_day -> float, failure_rate_pct -> float, owner -> str, pull_requests -> int, repository -> str, user -> str, workflow_failed -> int, workflow_success -> int
performance/source/github_metrics.py:45: class SummaryEntry(BaseModel)
    • class_attrs: additions -> int, commits -> int, deletions -> int, deploy_per_day_avg -> float, failure_rate_pct_avg -> float, pull_requests -> int, score -> float, user -> str, workflow_failed -> int, workflow_success -> int
# ───────────── Dependencies ─────────────
beanie>=1.30.0
jinja2>=3.1.6
pandas>=2.3.0
pydantic-settings>=2.10.1
pydantic>=2.11.7
pygithub>=2.6.1
python-dotenv>=1.1.1
